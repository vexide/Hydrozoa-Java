package dev.vexide.hydrozoa.plugin.bindings

import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.Modifier
import com.github.javaparser.ast.Modifier.Keyword
import com.github.javaparser.ast.Node
import com.github.javaparser.ast.NodeList
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.ast.expr.StringLiteralExpr
import com.github.javaparser.ast.nodeTypes.NodeWithAnnotations

fun CompilationUnit.addHydrozoaGeneratedComment(): CompilationUnit {
    this.setBlockComment(" This file was automatically @generated by the Hydrozoa bindings generator. Do not edit this manually!\n"
            + "   Instead, update the Hydrozoa SDK at <https://github.com/vexide/hydrozoa> and re-run the generator. ")
    return this
}

fun<N: Node> NodeWithAnnotations<N>.addHydrozoaGeneratedAnnotation(): N {
    return this.addSingleMemberAnnotation(
        javax.annotation.processing.Generated::class.java,
        StringLiteralExpr("dev.vexide.hydrozoa.plugin.bindings.BindingsGeneratorPlugin")
    )
}

fun ClassOrInterfaceDeclaration.addStaticInitAnnotation(): ClassOrInterfaceDeclaration {
    return this.addMarkerAnnotation("org.teavm.interop.StaticInit")
}

fun<T: NodeWithAnnotations<N>, N: Node> T.addNotNullAnnotation(add: Boolean = true): T {
    if (add) {
        addMarkerAnnotation("org.jetbrains.annotations.NotNull")
    }
    return this
}

fun ClassOrInterfaceDeclaration.addPrivateConstructor(): ClassOrInterfaceDeclaration {
    this.addConstructor(Keyword.PRIVATE)
    return this
}

fun<T: Node> nodeListOf(vararg items: T): NodeList<T> {
    return NodeList.nodeList(*items)
}

fun modifierListOf(vararg modifiers: Keyword): NodeList<Modifier> {
    return Modifier.createModifierList(*modifiers)
}