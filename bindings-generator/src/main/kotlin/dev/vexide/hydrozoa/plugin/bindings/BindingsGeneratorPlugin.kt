/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.vexide.hydrozoa.plugin.bindings

import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.Modifier.Keyword
import com.github.javaparser.ast.type.Type
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.ast.expr.StringLiteralExpr
import com.github.javaparser.ast.type.PrimitiveType
import com.github.javaparser.ast.type.PrimitiveType.Primitive
import com.github.javaparser.ast.type.VoidType
import com.google.common.base.CaseFormat
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

/**
 * A simple 'hello world' plugin.
 */
class BindingsGeneratorPlugin: Plugin<Project> {

    override fun apply(project: Project) {
        // Register a task
        project.tasks.register("greeting") { task ->
            task.doLast {
                println("Hello from plugin 'org.example.greeting'")

            }
        }
    }
}

@Serializable
data class SdkModule(
    val name: String,
    val items: List<SdkItem>,
    val enums: List<SdkEnum>,
)

@Serializable
data class SdkItem(
    val name: String,
    val params: List<Param>,
    val returns: Type?,
) {
    @Serializable
    data class Param(
        val name: String,
        val type: Type,
    )

    @Serializable
    sealed class Type {
        @Serializable @SerialName("Bool")
        object Bool: Type()

        @Serializable @SerialName("Int")
        object Int: Type()

        @Serializable @SerialName("Long")
        object Long: Type()

        @Serializable @SerialName("Float")
        object Float: Type()

        @Serializable @SerialName("Double")
        object Double: Type()

        @Serializable @SerialName("StringPtr")
        object StringPtr: Type()

        @Serializable @SerialName("Named")
        data class Named(val name: String): Type()
    }
}

@Serializable
data class SdkEnum(
    val name: String,
    @SerialName("underlying_type")
    val underlyingType: SdkItem.Type,
    val variants: Map<String, Double>,
)

abstract class GenerateBindingsTask : DefaultTask() {
    @get:InputFile
    abstract val apiFile: RegularFileProperty

    @get:OutputDirectory
    abstract val outputDirectory: DirectoryProperty

    @TaskAction
    fun generateBindings() {
        val apiFile = apiFile.asFile.get()
        val api = Json.decodeFromString<SdkModule>(apiFile.readText())
    }
}

class JavaSdkModule(val sdk: SdkModule) {
    fun generate(): CompilationUnit {
        val cu = CompilationUnit("dev.vexide.hydrozoa.sdk.generated")

        var className = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, sdk.name) + "Sdk"
        val bindingsClass = cu.addClass(className, Keyword.PUBLIC, Keyword.STATIC, Keyword.FINAL)
            .addSingleMemberAnnotation(
                javax.annotation.processing.Generated::class.java,
                StringLiteralExpr("dev.vexide.hydrozoa.plugin.bindings.BindingsGeneratorPlugin"))
            .addAnnotation("org.teavm.interop.StaticInit")

        for (item in sdk.items) {
            JavaSdkItem(item).generate(bindingsClass)
        }

        return cu
    }
}

class JavaSdkItem(val sdk: SdkItem) {
    fun generate(bindingsClass: ClassOrInterfaceDeclaration) {
        bindingsClass
            .addMethod(sdk.name, Keyword.PUBLIC, Keyword.STATIC)
            .setType(rawTypeFor(sdk.returns))
    }

    private fun rawTypeFor(type: SdkItem.Type?): Type {
        return when (type) {
            null -> VoidType()
            is SdkItem.Type.Bool -> PrimitiveType(Primitive.BOOLEAN)
            is SdkItem.Type.Int -> PrimitiveType(Primitive.INT)
            is SdkItem.Type.Long -> PrimitiveType(Primitive.LONG)
            is SdkItem.Type.Float -> PrimitiveType(Primitive.FLOAT)
            is SdkItem.Type.Double -> PrimitiveType(Primitive.DOUBLE)
            is SdkItem.Type.StringPtr -> StaticJavaParser.parseClassOrInterfaceType("String")
            is SdkItem.Type.Named -> StaticJavaParser.parseClassOrInterfaceType(type.name)
        }
    }
}
